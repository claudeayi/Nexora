// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(cuid())
  key       String   @unique
  name      String

  users     User[]
  leads     Lead[]
  links     Link[]
  clicks    Click[]
  events    Event[]
  installs  MarketplaceInstall[]

  createdAt DateTime @default(now())

  @@index([key])
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  passwordHash  String
  name          String?
  role          String         @default("user")
  plan          String         @default("free")

  tenantId      String
  tenant        Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  subscriptions Subscription[]

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([tenantId])
  @@index([email])
}

model Lead {
  id           String   @id @default(cuid())

  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  email        String
  name         String?
  phone        String?

  score        Int      @default(0)
  utmSource    String?
  utmMedium    String?
  utmCampaign  String?

  createdAt    DateTime @default(now())

  @@index([tenantId, createdAt])
  @@index([email])
}

model Link {
  id           String   @id @default(cuid())

  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  slug         String   @unique
  destination  String

  clicks       Click[]

  createdAt    DateTime @default(now())

  @@index([tenantId, createdAt])
}

model Click {
  id        String   @id @default(cuid())

  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  linkId    String
  link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([tenantId, createdAt])
  @@index([linkId])
}

model Event {
  id          String   @id @default(cuid())

  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  name        String
  properties  Json?

  // Champs utiles pour analytics, pixel et attribution
  anonymousId String?
  userId      String?
  ip          String?
  userAgent   String?
  url         String?

  createdAt   DateTime @default(now())

  @@index([tenantId, createdAt])
  @@index([name, tenantId])
}

model Experiment {
  id       String    @id @default(cuid())
  name     String    @unique
  status   String    @default("active")

  variants Variant[]
}

model Variant {
  id           String     @id @default(cuid())
  name         String
  weight       Int        @default(50)
  views        Int        @default(0)
  conversions  Int        @default(0)

  experimentId String
  experiment   Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)

  @@index([experimentId])
  @@index([name, experimentId])
}

model FeatureFlag {
  id    String  @id @default(cuid())
  key   String  @unique
  on    Boolean @default(true)
  rules Json?
}

model Subscription {
  id        String   @id @default(cuid())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  plan      String
  status    String   @default("active")

  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}

model ProofLedger {
  id        String   @id @default(cuid())
  prevHash  String?
  data      Json
  hash      String   @unique
  createdAt DateTime @default(now())

  @@index([createdAt])
}

model MarketplaceInstall {
  id        String   @id @default(cuid())

  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  appId     String
  createdAt DateTime @default(now())

  @@unique([tenantId, appId])
  @@index([tenantId, createdAt])
}
